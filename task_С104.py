"""
TODO Каждый класс реализовать в отдельном модуле, импортируя их в производные модули.

Создать класс Disk с полями назание, жанр, цена. Добавить конструктор класса.

TODO Создать производный от Disk класс Audio. Новые поля: исполнитель, студия звукозаписи, список песен (словарь вида
    название песни: длительность). Определить конструктор, с вызовом родительского конструктора. Определить
    функции добавления новой песни, удаления песни, форматированной печати плейлиста. Переопределить метод
    преобразования в строку для печати основной информации (исполнитель, название альбома, жанр,
    студия звукозаписи, цена).

TODO Создать производный от Disk класс DVD. Новые поля: режиссер, кинокомпания, главные роли (словарь вида роль: ФИ актера).
    Определить конструктор, с вызовом родительского конструктора. Определить функции изменения режиссера, добавления,
    удаления и изменения списка главных ролей. Переопределить метод преобразования в строку для печати основной
    информации (режиссер, название фильма, жанр, кинокомпания, цена).

TODO Создать класс Store. Поля: название магазина, адрес, коллекция аудиодисков (список экземпляров класса Audio),
    коллекция фильмов (список экземпляров класса DVD). Определить конструктор. Переопределить метод преобразования
    в строку для печати всей информации о магазине (с использованием переопределения в классах Audio и DVD).
    Переопределить методы получения количества дисков функцией len, получения диска по индексу, изменения по
    индексу, удаления по индексу (пусть вначале идут индексы аудиодисков, затем фильмов). Переопределить
    операции + и - для добавления или удаления диска. Добавить функцию создания txt-файла и записи всей
    информации в него (в том числе списков песен и главных ролей фильма).

TODO Предусмотреть хотя бы в 3 местах обработку возможных исключений.
TODO В каждом модуле провести подробное тестирование всех создаваемых объектов и функций.
"""

from store import *

stores = []

def manage_stores():
    ans = ''
    while ans != '0':
        print('Магазины:')
        if len(stores) == 0:
            print("магазинов нету")
        for i in range(len(stores)):
            print(str(i + 1) + '.', stores[i].get_main_info())
        print('команды: 1 - управлять магазином, 2 - создать магазин, 3 - удалить магазин, 0 - выйти')
        try:
            ans = input().strip()
            match ans:
                case '1':
                    print('Введите индекс магазина: ', end='')
                    ans = int(input()) - 1
                    if ans in range(len(stores)):
                        manage_store(stores[ans])
                    else:
                        print('Магазин с индексом {} не найден'.format(ans))
                case '2':
                    print('Введите название магазина: ', end='')
                    name = input().strip()
                    store = Store(name)
                    stores.append(store)
                case '3':
                    print('Введите индекс магазина: ', end='')
                    ans = int(input()) - 1
                    if ans in range(len(stores)):
                        del stores[ans]
                    else:
                        print('МАГАЗИН НЕ НАЙДЕН')
        except ValueError:
            print('НЕВЕРНЫЙ ТИП ДАННЫХ')
        print()


def manage_store(store: Store):
    ans = ''
    while ans != '0':
        print('-' * 20)
        print(store)
        print('-' * 20)
        print('команды: 1 - добавить диск, 2 - изменить диск, 3 - удалить диск, 4 - изменить адрес магазина, '
              '5 - изменить имя магазина, 6 - записать в файл, 0 - выйти')
        ans = input().strip()
        match ans:
            case '1':
                print('Диск какого типа вы хотите добавить (1 - аудиодиск, 2 - фильм)')
                ans2 = input().strip()
                match ans2:
                    case '1':
                        audio = Audio('')
                        store += audio
                        for prop in list(audio.properties.keys()):
                            audio.change_property(prop)
                    case '2':
                        dvd = DVD('')
                        store += dvd
                        for prop in list(dvd.properties.keys()):
                            dvd.change_property(prop)
            case '2':
                store.change_disks()
            case '3':
                store.delete_disk()
            case '4':
                store.change_property('адрес')
            case '5':
                store.change_property('имя')
            case '6':
                print('Введите имя файла (.txt)')
                path = input().strip()
                store.write_txt(path)
                print('Информация записана')


manage_stores()
